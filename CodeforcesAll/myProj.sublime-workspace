{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"go",
				"go1"
			],
			[
				"em",
				"emplace(${1:});"
			],
			[
				"emp",
				"empty()"
			],
			[
				"puh",
				"push_back(${1:});"
			],
			[
				"zz",
				"zzcodestarter\tc++ starting with test case."
			],
			[
				"wha",
				"whatis1"
			],
			[
				"sor",
				"sort(${1:v}.begin(),${1:v}.end());"
			],
			[
				"so",
				"sort(${1:v}.begin(),${1:v}.end());"
			],
			[
				"case",
				"cases"
			],
			[
				"tmp",
				"tmp2"
			],
			[
				"soe",
				"sort(${1:v}.begin(),${1:v}.end(),greater<${2:int}>());"
			],
			[
				"cout",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"for",
				"for(int ${1:i}=${2:0}; ${1:i}<${3:n}; ${1:i}${4:++}) {$5}"
			],
			[
				"vecto",
				"vector<int> "
			],
			[
				"new",
				"newHead"
			],
			[
				"list",
				"list3"
			],
			[
				"score",
				"scorec"
			],
			[
				"scor",
				"scoren"
			],
			[
				"cou",
				"cout<<'\\n';"
			],
			[
				"whi",
				"while"
			],
			[
				"whA",
				"whatArray2D"
			],
			[
				"what",
				"whatis1"
			],
			[
				"se",
				"set<int> "
			],
			[
				"pop",
				"pop();"
			],
			[
				"shou",
				"shouldpp"
			],
			[
				"shoul",
				"shouldpp"
			],
			[
				"Y",
				"cout<<\"YES\"<<'\\n';"
			],
			[
				"po",
				"pop_back();"
			],
			[
				"ask",
				"askToTest"
			],
			[
				"pu",
				"push_back(${1:});"
			],
			[
				"p",
				"pop();"
			],
			[
				"set",
				"set<int> "
			],
			[
				"wh",
				"while"
			],
			[
				"sort",
				"sort(${1:v}.begin(),${1:v}.end(),greater<${2:int}>());"
			],
			[
				"pri",
				"priority_queue<${1:int}>"
			],
			[
				"lvl",
				"lvlv"
			],
			[
				"whaA",
				"whatisArray"
			],
			[
				"cla",
				"clear();"
			],
			[
				"dpm",
				"dpmn"
			],
			[
				"_abs",
				"_absmn"
			],
			[
				"rw",
				"rows"
			],
			[
				"pus",
				"push_back(${1:});"
			],
			[
				"has",
				"hasht2"
			],
			[
				"hash",
				"hash2"
			],
			[
				"hp",
				"hp2"
			],
			[
				"fi",
				"first"
			],
			[
				"waht",
				"whatis1"
			],
			[
				"dig",
				"digy"
			],
			[
				"funcM",
				"funcMAX"
			],
			[
				"WHA",
				"whatis2"
			],
			[
				"N",
				"cout<<\"NO\"<<'\\n';"
			],
			[
				"sol",
				"solve2"
			],
			[
				"v",
				"vector<int> "
			],
			[
				"u",
				"upper_bound(${1:v}.begin(), ${1:v}.end(), ${2:x});"
			],
			[
				"cl",
				"clear();"
			],
			[
				"like",
				"likeb"
			],
			[
				"empla",
				"emplace(${1:});"
			],
			[
				"query",
				"rangeQuery"
			],
			[
				"tsec",
				"tsecondmx"
			],
			[
				"tmx",
				"tmxcnt"
			],
			[
				"second",
				"secondmx"
			],
			[
				"pw",
				"powa"
			],
			[
				"pow",
				"powb"
			],
			[
				"begi",
				"begin()"
			],
			[
				"frequ",
				"frequencycounter"
			],
			[
				"freque",
				"frequency"
			],
			[
				"vec",
				"vector<int> "
			],
			[
				"IN",
				"INT_MIN"
			],
			[
				"laz",
				"lazyMax"
			],
			[
				"lazy",
				"lazyMin"
			],
			[
				"build",
				"build_max_tree"
			],
			[
				"index",
				"indexs"
			],
			[
				"whaAt",
				"whatisArray"
			],
			[
				"empl",
				"emplace(${1:});"
			],
			[
				"fac",
				"fact"
			],
			[
				"x",
				"upper_bound(${1:v}.begin(), ${1:v}.end(), ${2:x});"
			],
			[
				"mxs",
				"mxst"
			],
			[
				"dis",
				"difs"
			],
			[
				"pi",
				"priority_queue<${1:int}>"
			],
			[
				"val",
				"vals"
			],
			[
				"map",
				"map<int,int> "
			],
			[
				"be",
				"begin()"
			],
			[
				"tmpm",
				"tmpmn"
			],
			[
				"z",
				"zzcodestarter\tc++ starting with test case."
			],
			[
				"pp",
				"pop_back();"
			],
			[
				"co",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"update",
				"updateElement"
			],
			[
				"cuot",
				"cout<<'\\n';"
			],
			[
				"push",
				"push_back(${1:});"
			],
			[
				"w",
				"whatisArray"
			],
			[
				"j-co",
				"j-co2"
			],
			[
				"sum",
				"suma"
			],
			[
				"INT_M",
				"INT_MAX"
			],
			[
				"I",
				"INT_MAX"
			],
			[
				"pr",
				"cout.precision(8); cout<<fixed "
			],
			[
				"exp",
				"exprimes"
			],
			[
				"expo",
				"exponents"
			],
			[
				"node",
				"myNode"
			],
			[
				"vis",
				"visited"
			],
			[
				"wah",
				"whatis2"
			],
			[
				"__",
				"__builtin_popcountll(${1:})"
			],
			[
				"upda",
				"updateElement"
			],
			[
				"nod",
				"myNode"
			],
			[
				"slp",
				"slps"
			],
			[
				"pa",
				"pair<int,int> "
			],
			[
				"all",
				"all9"
			],
			[
				"curm",
				"curmx"
			],
			[
				"LL",
				"LLONG_MAX"
			],
			[
				"whatis",
				"whatis2"
			],
			[
				"sro",
				"sort(${1:v}.begin(),${1:v}.end());"
			],
			[
				"socr",
				"score"
			],
			[
				"only",
				"onlysc"
			],
			[
				"SOR",
				"sort(${1:v}.begin(),${1:v}.end(),greater<${2:int}>());"
			],
			[
				"eme",
				"emplace_back(${1:});"
			],
			[
				"L",
				"LLONG_MAX"
			],
			[
				"c",
				"clear();"
			],
			[
				"MI",
				"LLONG_MIN"
			],
			[
				"ps",
				"push_back(${1:});"
			],
			[
				"righ",
				"right"
			],
			[
				"right",
				"rightsum"
			],
			[
				"cot",
				"vector<int> "
			],
			[
				"um",
				"unmatch"
			],
			[
				"vce",
				"vector<int> "
			],
			[
				"COUT",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"linene",
				"lineneg"
			],
			[
				"cotu",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"rem",
				"reml"
			],
			[
				"e",
				"end()"
			]
		]
	},
	"buffers":
	[
		{
			"file": "AA.cpp",
			"settings":
			{
				"buffer_size": 3272,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/Projects/CompititiveProgramming/BFS_DFS/implementation/BFS_graph.cpp",
			"settings":
			{
				"buffer_size": 2207,
				"line_ending": "Windows"
			}
		},
		{
			"file": "inputf.in",
			"settings":
			{
				"buffer_size": 7,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "outputf.out",
			"settings":
			{
				"buffer_size": 2,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package control: package lis",
				"Package Control: List Packages"
			],
			[
				"package list",
				"Package Control: List Packages"
			],
			[
				"inden",
				"Indentation: Convert to Spaces"
			],
			[
				"in",
				"Indentation: Reindent Lines"
			],
			[
				"pref",
				"Preferences: Browse Packages"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: c++ starting without test case."
			],
			[
				"ope",
				"PackageResourceViewer: Open Resource"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"prv",
				"PackageResourceViewer: Open Resource"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"trime",
				"Trimmer: Delete empty lines."
			],
			[
				"trim",
				"Preferences: Terminal Settings â€“ Default"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"mkdir ss"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Projects/CompititiveProgramming",
		"/D/Projects/CompititiveProgramming/BFS_DFS",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation",
		"/D/Projects/CompititiveProgramming/BinerySearch",
		"/D/Projects/CompititiveProgramming/BIT",
		"/D/Projects/CompititiveProgramming/CodeforcesAll",
		"/D/Projects/CompititiveProgramming/DisjointSet",
		"/D/Projects/CompititiveProgramming/DP",
		"/D/Projects/CompititiveProgramming/Game",
		"/D/Projects/CompititiveProgramming/Interactive",
		"/D/Projects/CompititiveProgramming/LCA",
		"/D/Projects/CompititiveProgramming/LinkedList",
		"/D/Projects/CompititiveProgramming/Math",
		"/D/Projects/CompititiveProgramming/Math/Combinatorics",
		"/D/Projects/CompititiveProgramming/Math/Combinatorics/LightOJ",
		"/D/Projects/CompititiveProgramming/Math/int_sqrt",
		"/D/Projects/CompititiveProgramming/PriorityQueue",
		"/D/Projects/CompititiveProgramming/String",
		"/D/Projects/CompititiveProgramming/String/Hashing",
		"/D/Projects/CompititiveProgramming/UnorderMap_Hash_Map"
	],
	"file_history":
	[
		"/D/Projects/CompititiveProgramming/CodeforcesAll/inputf.in",
		"/D/Projects/CompititiveProgramming/Math/Combinatorics/pasecalTriangle.cpp",
		"/D/Projects/CompititiveProgramming/String/Trie/TrieImplementation.cpp",
		"/D/Projects/CompititiveProgramming/LinkedList/Testing.cpp",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation/inlineDFSfunction.cpp",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation/dfs_graph.cpp",
		"/D/Projects/CompititiveProgramming/BinerySearch/note.txt",
		"/D/Projects/CompititiveProgramming/Math/InverseMod/NcRmod.cpp",
		"/D/Projects/CompititiveProgramming/PrefixSum/Trick_2D/gridPrefixSum.cpp",
		"/D/Projects/CompititiveProgramming/BIT/bit.cpp",
		"/D/Projects/CompititiveProgramming/String/Hashing/dubbleHasshing.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/Alt.cpp",
		"/D/Projects/CompititiveProgramming/DisjointSet/disjointset2D.cpp",
		"/D/Projects/CompititiveProgramming/String/Hashing/hashingOntree.cpp",
		"/D/Projects/CompititiveProgramming/String/Hashing/Hashing.cpp",
		"/D/Projects/CompititiveProgramming/BigSum/BigSum.cpp",
		"/D/Projects/CompititiveProgramming/DP/minSumWithDistanceNotGreaterThanD/minSumWithDistanceNotGreaterThanD.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/__mageFun_Max_n_Second_Max_with_count_in_range.cpp",
		"/D/Projects/CompititiveProgramming/Interactive/AA.cpp",
		"/D/Projects/CompititiveProgramming/DP/DigitDp/HowManyZeroes.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/lazy_min_max_perfect.cpp",
		"/D/Projects/CompititiveProgramming/String/kmp.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/lazySum_Min_Max.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/__margeFunctionSegmentTree.cpp",
		"/D/Projects/CompititiveProgramming/String/inputf.in",
		"/D/Projects/CompititiveProgramming/String/outputf.out",
		"/C/Users/user/Downloads/htdcedu_res.sql",
		"/D/Projects/CompititiveProgramming/DP/CoinChange/coinChaingeIII.cpp",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/simple.cpp",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/countSmallerBiggerLeft.cpp",
		"/C/Users/user/OneDrive/Desktop/delete.html",
		"/D/Projects/CompititiveProgramming/SegmentTree/lazySum_Min_both.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/RangeSumQueryUpdate.cpp",
		"/D/Projects/CompititiveProgramming/Game/nimGame.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/hack.cpp",
		"/D/Projects/CompititiveProgramming/String/rabin_karp.cpp",
		"/D/Projects/CompititiveProgramming/DP/DigitDp/digitdp.cpp",
		"/D/Projects/CompititiveProgramming/phameenAssignGroup10.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/other.cpp",
		"/D/Projects/CompititiveProgramming/DisjointSet/disjointset.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/ref.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/del.cpp",
		"/D/Projects/CompititiveProgramming/Math/PrimeFactorization/primefactorization.cpp",
		"/D/Projects/CompititiveProgramming/Math/number_of_prime_factors_for_all_1_to_N.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/ex.cpp",
		"/D/Projects/CompititiveProgramming/Interactive/AA_with_local_test.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/AA.cpp",
		"/C/Users/user/AppData/Roaming/Sublime Text 3/Installed Packages/Package Control.sublime-package",
		"/C/Users/user/OneDrive/Desktop/sublimeSettings/Preferences.sublime-settings",
		"/D/Projects/CompititiveProgramming/SegmentTree/min_max_index_with_single_update.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/outputf.out",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/find_kth_element_fast.cpp",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/almostsimiler_but_fast.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/nodeUpdateSegmentTree.cpp",
		"/C/Users/user/Downloads/env (1)",
		"/D/Projects/CompititiveProgramming/LCA/LCA_SPOJ.cpp",
		"/D/Projects/CompititiveProgramming/LCA/LightOJ/ASecretMission.cpp",
		"/D/Projects/CompititiveProgramming/LCA/Implimentation/LCAimplimentation.cpp",
		"/D/Projects/CompititiveProgramming/LCA/LCAimplimentation.cpp",
		"/C/Users/user/Downloads/realstatedb.sql",
		"/D/Projects/CompititiveProgramming/Graph/dijkastra.cpp",
		"/D/Projects/CompititiveProgramming/PrefixSum/Trick/gridPrefixSum.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/rangeMaxSubarraySum.cpp",
		"/D/Projects/CompititiveProgramming/Math/Euler_totient_phi/phi_signle_1_to_n_both.cpp",
		"/D/Projects/CompititiveProgramming/Math/InverseMod/inversemod.cpp",
		"/D/Projects/CompititiveProgramming/DP/bitmask/codeforces_321_D.cpp",
		"/D/Projects/CompititiveProgramming/Math/GCD/gcd_set_common_remove.cpp",
		"/D/Projects/CompititiveProgramming/Math/GCD/gcd_mask_common_remove.cpp",
		"/D/Projects/CompititiveProgramming/DP/EasyLCS.cpp",
		"/D/Projects/CompititiveProgramming/DP/CoinChange/coinChange_allow_same_coin.cpp",
		"/D/Projects/CompititiveProgramming/Math/Extend_Euclid/extend_euclid.cpp",
		"/D/Projects/CompititiveProgramming/Math/PascalTriangle/Race.cpp",
		"/D/Projects/CompititiveProgramming/Math/int_sqrt/int_sqrt.cpp",
		"/D/Projects/CompititiveProgramming/Math/Seive/Seive.cpp",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/pbds_less_greater_code.cpp",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation/BFS_grid.cpp",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation/dfs_grid.cpp",
		"/D/Projects/CompititiveProgramming/Optimised_O_NN/AA.cpp",
		"/D/CompititiveProgramming/PriorityQueue/customPriotiryQueue.cpp",
		"/D/CompititiveProgramming/Interactive/AA.cpp",
		"/D/CompititiveProgramming/DisjointSet/disjointset.cpp",
		"/D/CompititiveProgramming/DP/0_1_Napsak/0_1_napsack.cpp",
		"/C/wamp/www/hths/actionGetAttendance.php",
		"/C/wamp/www/hths/updatTeacher.php",
		"/D/CompititiveProgramming/SegmentTree/lazySum_Min_both.cpp",
		"/D/CompititiveProgramming/DP/EasyGame.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/outputf.out",
		"/D/CompititiveProgramming/CodeforcesAll/inputf.in",
		"/D/CompititiveProgramming/CodeforcesAll/AA.cpp",
		"/C/wamp/www/hths/hths/database_connection.php",
		"/D/CompititiveProgramming/DP/DigitDp/HowManyZeroes.cpp",
		"/D/CompititiveProgramming/DP/DigitDp/digitdp.cpp",
		"/D/CompititiveProgramming/DP/HowManyZeroes.cpp",
		"/D/CompititiveProgramming/DP/DivisibleGroupSums.cpp",
		"/D/CompititiveProgramming/DP/LoveCalculator.cpp",
		"/D/CompititiveProgramming/DP/delPalindrom.cpp",
		"/D/CompititiveProgramming/Math/InverseMod/inversemod.cpp",
		"/D/CompititiveProgramming/Math/InverseMod/NcRmod.cpp",
		"/D/CompititiveProgramming/SegmentTree/nodeUpdateSegmentTree.cpp",
		"/D/CompititiveProgramming/SegmentTree/RangeSumQueryUpdate.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/map.php",
		"/D/CompititiveProgramming/BFS_DFS/implementation/dfs_graph.cpp",
		"/D/CompititiveProgramming/BFS_DFS/implementation/BFS_graph.cpp",
		"/C/wamp/www/mra.digitalnetrokona.org/app/Http/Controllers/ComplaintController.php",
		"/C/wamp/www/mra.digitalnetrokona.org/resources/views/complain/list.blade.php",
		"/C/wamp/www/mra.digitalnetrokona.org/app/Classes/PropClass.php",
		"/C/wamp/www/mra.digitalnetrokona.org/app/Imports/MfiImport.php",
		"/D/CompititiveProgramming/BFS_DFS/implementation/dfs_grid.cpp",
		"/C/Users/kmpar/AppData/Roaming/Sublime Text 3/Packages/User/cp.sublime-completions",
		"/C/Users/kmpar/AppData/Roaming/Sublime Text 3/Packages/User/cp1.sublime-snippet",
		"/C/Users/kmpar/AppData/Roaming/Sublime Text 3/Packages/User/cp2.sublime-snippet",
		"/D/CompititiveProgramming/BFS_DFS/implementation/BFS_grid.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/zzdfe.cpp",
		"/D/CompititiveProgramming/DP/APerfectMurder.cpp",
		"/D/CompititiveProgramming/DP/MatricsChainMultiplication/PalindromePartitioning.cpp",
		"/D/CompititiveProgramming/DP/Race.cpp",
		"/D/CompititiveProgramming/DP/coinChaingeII.cpp",
		"/D/CompititiveProgramming/DP/Batman.cpp",
		"/D/CompititiveProgramming/DP/AnagramDivision.cpp",
		"/D/CompititiveProgramming/BFS_DFS/UVA/Ex_uva_459_GraphConnectivity_dfs.cpp",
		"/D/CompititiveProgramming/BFS_DFS/LightOj/beehives.cpp",
		"/D/CompititiveProgramming/LCA/LightOJ/outputf.out",
		"/D/CompititiveProgramming/LCA/LightOJ/inputf.in",
		"/D/CompititiveProgramming/LCA/LightOJ/ASecretMission.cpp",
		"/D/CompititiveProgramming/LCA/LCA_SPOJ.cpp",
		"/D/CompititiveProgramming/LCA/SparseTable.cpp",
		"/D/CompititiveProgramming/inputf.in",
		"/D/CompititiveProgramming/PriorityQueue/outputf.out"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"iPair",
			"askToTest",
			"Trie",
			"tmp",
			"node",
			"head",
			";\n",
			"even",
			"pre",
			"int",
			"p[i]",
			"cur[i]",
			"cnt",
			"back",
			"cost",
			"mid",
			" rank,",
			"std::vector<int>& rank,",
			"count",
			", count",
			"count",
			"ind",
			"len",
			";\n",
			"pp",
			"right",
			"left",
			"pre2",
			"comes",
			"suf2",
			"suf",
			"pre",
			"suf",
			"pre",
			"i",
			";\n",
			"1",
			"v[2]",
			"v[1]",
			"v[0]",
			"int",
			"mx",
			"return",
			"emplace",
			"int",
			"suf2",
			"pre2",
			";\n",
			"b",
			"a",
			"node",
			"make_pair",
			"first",
			"second",
			"pair<int, int>",
			"nw[i]",
			"maximumOccurrence",
			"bsize",
			"anslen",
			"score",
			"query_max_tree",
			"MIN",
			"Max",
			"max",
			"build_tree",
			"constSegTree",
			"ptr",
			"prtn",
			"str",
			"caseno",
			"mp",
			"ALGORITHM",
			"create view",
			"view",
			"access",
			"zz",
			"salary",
			"c",
			"X",
			"need",
			"arr",
			"what",
			"ok",
			");\n",
			"INT_MAX",
			"ar",
			"MAX",
			"tree",
			"constSegTree",
			"ar",
			"ll",
			"MAX",
			"combine",
			"lc",
			"long long",
			"rr",
			"trn",
			"mn",
			"3",
			"2",
			"1",
			"__FILE__",
			"NEAL_DEBUG",
			"ll",
			"MX",
			"];\n",
			"ll",
			"second",
			"first",
			"1e6",
			"1e5",
			"=",
			"0",
			"ll",
			"getSum",
			"constSegTree",
			"lim",
			"whatis",
			"whatis1",
			"whatis",
			"tocheck",
			";\n",
			"int",
			"cnt",
			"emplace",
			"primesquare",
			"hasCycle",
			"k"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"ask",
			"TrieNode",
			"cur",
			"ListNode",
			"d",
			"odd",
			"long long",
			"ll",
			"y",
			"x",
			"cnt2",
			"sq",
			"taken",
			"aa",
			"",
			" ",
			"",
			"k",
			"pii",
			"coverRight",
			"coverLeft",
			"comesFromLeft",
			"comesFromRight",
			"comes",
			"right",
			"left",
			"suf2",
			"pre2",
			"c",
			"b",
			"a",
			"long long",
			"mn",
			"insert",
			"double",
			"suf",
			"pre",
			"right",
			"left",
			"node",
			"mx",
			"mxcnt",
			"node",
			"tp",
			"MAX",
			"Min",
			"min",
			"ptrn",
			"z",
			"x",
			"w",
			"need",
			"x",
			"v",
			"//what",
			"arr",
			"MX",
			"arr",
			"int",
			"MX",
			"int",
			"mx",
			"[c]",
			"[b]",
			"[a]",
			"int",
			"first",
			"second",
			"scl",
			"1e9",
			"1e7",
			"1e6",
			"= (double)",
			"zero= (double)",
			"zero",
			"int",
			"__int128",
			"mp",
			"insert",
			"ask",
			"extraInputToTest",
			"ask",
			"askToTest",
			"askTotTest",
			"ask",
			"node",
			"ll",
			"bb",
			"aa",
			"rangeQuery",
			"myNode",
			"divs",
			"double",
			"n",
			"",
			"arr",
			"",
			"MX",
			"st",
			"cur",
			"sufL",
			"suf2",
			"g",
			"used",
			"ll",
			"paid",
			"q",
			"",
			"ll",
			"updateMaxSegTree",
			"queryMaxSegTree",
			"buildMaxSegTree",
			"updateMinSegTree",
			"queryMinSegTree",
			"buildMinSegTree",
			"max_buildSegmentTree",
			"indx",
			"value",
			"prezero",
			"preone",
			"int",
			"long long",
			"Int22",
			"int",
			"Int22 ",
			"int",
			"long long",
			"ll"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "AA.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3272,
						"regions":
						{
						},
						"selection":
						[
							[
								2365,
								2365
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1692.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/D/Projects/CompititiveProgramming/BFS_DFS/implementation/BFS_graph.cpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2207,
						"regions":
						{
						},
						"selection":
						[
							[
								1224,
								492
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 152.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "inputf.in",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7,
						"regions":
						{
						},
						"selection":
						[
							[
								6,
								6
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "outputf.out",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 41.3333333333
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.675058874749,
			1.0
		],
		"rows":
		[
			0.0,
			0.452506596306,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 94.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/CP.sublime-build",
	"project": "myProj.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 177.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
