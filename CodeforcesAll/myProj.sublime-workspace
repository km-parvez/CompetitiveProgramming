{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cout",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"wha",
				"whatis2"
			],
			[
				"tmp",
				"tmpl-left"
			],
			[
				"em",
				"emplace(${1:});"
			],
			[
				"pa",
				"priority_queue<${1:int}, vector<${1:int}>, greater<${1:int}>>"
			],
			[
				"zz",
				"zzcodestarter\tc++ starting without test case."
			],
			[
				"sor",
				"sort(${1:v}.begin(),${1:v}.end(),greater<${2:int}>());"
			],
			[
				"pop",
				"pop();"
			],
			[
				"LL",
				"LLONG_MAX"
			],
			[
				"what",
				"whatis3"
			],
			[
				"whatis",
				"whatis2"
			],
			[
				"wh",
				"while"
			],
			[
				"sro",
				"sort(${1:v}.begin(),${1:v}.end());"
			],
			[
				"for",
				"for(int ${1:i}=${2:0}; ${1:i}<${3:n}; ${1:i}${4:++}) {$5}"
			],
			[
				"socr",
				"score"
			],
			[
				"po",
				"pop();"
			],
			[
				"pri",
				"priority_queue<${1:int}>"
			],
			[
				"emp",
				"empty()"
			],
			[
				"so",
				"sort(${1:v}.begin(),${1:v}.end(),greater<${2:int}>());"
			],
			[
				"cou",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"only",
				"onlysc"
			],
			[
				"pus",
				"push_back(${1:});"
			],
			[
				"case",
				"cases"
			],
			[
				"pu",
				"push_back(${1:});"
			],
			[
				"SOR",
				"sort(${1:v}.begin(),${1:v}.end(),greater<${2:int}>());"
			],
			[
				"se",
				"set<int> "
			],
			[
				"eme",
				"emplace_back(${1:});"
			],
			[
				"set",
				"set<int> "
			],
			[
				"L",
				"LLONG_MAX"
			],
			[
				"z",
				"zzcodestarter\tc++ starting with test case."
			],
			[
				"c",
				"clear();"
			],
			[
				"sort",
				"sort(${1:v}.begin(),${1:v}.end(),greater<${2:int}>());"
			],
			[
				"MI",
				"LLONG_MIN"
			],
			[
				"fi",
				"first"
			],
			[
				"sum",
				"sumb"
			],
			[
				"ps",
				"push_back(${1:});"
			],
			[
				"righ",
				"right"
			],
			[
				"right",
				"rightsum"
			],
			[
				"cot",
				"vector<int> "
			],
			[
				"um",
				"unmatch"
			],
			[
				"vce",
				"vector<int> "
			],
			[
				"COUT",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"w",
				"whatis1"
			],
			[
				"linene",
				"lineneg"
			],
			[
				"new",
				"newlow"
			],
			[
				"cotu",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"rem",
				"reml"
			],
			[
				"has",
				"hasr"
			],
			[
				"e",
				"end()"
			],
			[
				"pw",
				"pwx"
			],
			[
				"whA",
				"whatisArray"
			],
			[
				"whaA",
				"whatisArray"
			],
			[
				"soe",
				"sort(${1:v}.begin(),${1:v}.end());"
			],
			[
				"co",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"en",
				"end()"
			],
			[
				"__",
				"__builtin_popcount(${1:})"
			],
			[
				"x",
				"int adjX[] = {0,1,0,-1};int adjY[] = {-1,0,1,0};"
			],
			[
				"pr",
				"priority_queue<${1:int}, vector<${1:int}>, greater<${1:int}>>"
			],
			[
				"val",
				"valmx"
			],
			[
				"p",
				"pair<int,int> "
			],
			[
				"cuo",
				"cout<<${1:}<<'${2:\\n}';"
			],
			[
				"mai",
				"map<int,int> "
			],
			[
				"ask",
				"askand"
			],
			[
				"IN",
				"INT_MAX"
			],
			[
				"us",
				"push_back(${1:});"
			],
			[
				"r",
				"rbegin()"
			],
			[
				"rihg",
				"rightMaxIndex"
			],
			[
				"left",
				"leftMaxIndex"
			],
			[
				"lef",
				"leftMaxIndex"
			],
			[
				"vec",
				"vector<int> "
			],
			[
				"wha2",
				"whatis2"
			],
			[
				"Y",
				"cout<<\"YES\"<<'\\n';"
			],
			[
				"mask",
				"maskb"
			],
			[
				"forn",
				"front()"
			],
			[
				"all",
				"allchild"
			],
			[
				"whs",
				"whatis3"
			],
			[
				"emplace",
				"emplace_back(${1:});"
			],
			[
				"carr",
				"carry"
			],
			[
				"__buil",
				"__builtin_popcountll(${1:})"
			],
			[
				"off",
				"off1"
			],
			[
				"g",
				"gcd"
			],
			[
				"gcd",
				"gcdb"
			],
			[
				"sq",
				"sqr"
			],
			[
				"pir",
				"priority_queue<${1:int}, vector<${1:int}>, greater<${1:int}>>"
			],
			[
				"vc",
				"vector<int> "
			],
			[
				"verc",
				"vector<int> "
			],
			[
				"empla",
				"emplace_back(${1:});"
			],
			[
				"query",
				"query_max_tree"
			],
			[
				"INT_M",
				"INT_MIN"
			],
			[
				"treeM",
				"treeMax"
			],
			[
				"treeMax",
				"treeMaxInd"
			],
			[
				"treeMa",
				"treeMaxInd"
			],
			[
				"cmn",
				"cmn1"
			],
			[
				"ve",
				"vector<int> "
			],
			[
				"vector",
				"vector<int> "
			],
			[
				"casen",
				"caseno"
			],
			[
				"hel",
				"help2"
			],
			[
				"he",
				"help"
			],
			[
				"give",
				"sort(${1:v}.begin(),${1:v}.end(),greater<${2:int}>());"
			],
			[
				"mp",
				"map<int,int> "
			],
			[
				"N",
				"cout<<\"NO\"<<'\\n';"
			],
			[
				"ci",
				"cin>>"
			],
			[
				"nw",
				"nw2"
			],
			[
				"M",
				"INT_MIN"
			],
			[
				"type",
				"type1"
			],
			[
				"fal",
				"flag"
			],
			[
				"wa",
				"whatisArray"
			],
			[
				"whatArray",
				"whatisArray"
			],
			[
				"vis",
				"visx"
			],
			[
				"sm",
				"smxr"
			],
			[
				"fla",
				"flagR"
			],
			[
				"WHA",
				"whatis1"
			],
			[
				"map",
				"map<int,int> "
			],
			[
				"begi",
				"begin()"
			],
			[
				"dis",
				"disy"
			],
			[
				"puhs",
				"push_back(${1:});"
			],
			[
				"ep",
				"emplace(${1:});"
			],
			[
				"zero",
				"zeroa"
			],
			[
				"cla",
				"clear();"
			],
			[
				"sole",
				"solve1"
			],
			[
				"sol",
				"solve3"
			],
			[
				"In",
				"INT_MAX"
			],
			[
				"laz",
				"lazyMin"
			],
			[
				"COU",
				"cout<<\"YES\"<<'\\n';"
			],
			[
				"be",
				"begin()"
			],
			[
				"n",
				"cout<<'\\n';"
			],
			[
				"minL",
				"minLR"
			],
			[
				"hi",
				"hicost"
			]
		]
	},
	"buffers":
	[
		{
			"file": "AA.cpp",
			"settings":
			{
				"buffer_size": 6647,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/Projects/CompititiveProgramming/PriorityQueue/customPriotiryQueue.cpp",
			"settings":
			{
				"buffer_size": 2502,
				"line_ending": "Windows"
			}
		},
		{
			"file": "inputf.in",
			"settings":
			{
				"buffer_size": 31,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "outputf.out",
			"settings":
			{
				"buffer_size": 159,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inden",
				"Indentation: Convert to Spaces"
			],
			[
				"in",
				"Indentation: Reindent Lines"
			],
			[
				"pref",
				"Preferences: Browse Packages"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: c++ starting without test case."
			],
			[
				"ope",
				"PackageResourceViewer: Open Resource"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"prv",
				"PackageResourceViewer: Open Resource"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"trime",
				"Trimmer: Delete empty lines."
			],
			[
				"trim",
				"Preferences: Terminal Settings â€“ Default"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"mkdir ss"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Projects/CompititiveProgramming",
		"/D/Projects/CompititiveProgramming/BFS_DFS",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation",
		"/D/Projects/CompititiveProgramming/BinerySearch",
		"/D/Projects/CompititiveProgramming/Interactive",
		"/D/Projects/CompititiveProgramming/LCA",
		"/D/Projects/CompititiveProgramming/LCA/Implimentation",
		"/D/Projects/CompititiveProgramming/PriorityQueue",
		"/D/Projects/CompititiveProgramming/SegmentTree"
	],
	"file_history":
	[
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation/dfs_graph.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/min_max_index_with_single_update.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/outputf.out",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/find_kth_element_fast.cpp",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/almostsimiler_but_fast.cpp",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/countSmallerBiggerLeft.cpp",
		"/D/Projects/CompititiveProgramming/BIT/bit.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/lazySum_Min_Max.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/nodeUpdateSegmentTree.cpp",
		"/C/Users/user/Downloads/env (1)",
		"/D/Projects/CompititiveProgramming/LCA/LCA_SPOJ.cpp",
		"/D/Projects/CompititiveProgramming/LCA/LightOJ/ASecretMission.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/AA.cpp",
		"/D/Projects/CompititiveProgramming/LCA/Implimentation/LCAimplimentation.cpp",
		"/D/Projects/CompititiveProgramming/LCA/LCAimplimentation.cpp",
		"/D/Projects/CompititiveProgramming/BinerySearch/note.txt",
		"/C/Users/user/Downloads/realstatedb.sql",
		"/D/Projects/CompititiveProgramming/Graph/dijkastra.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/lazySum_Min_both.cpp",
		"/D/Projects/CompititiveProgramming/Math/PrimeFactorization/primefactorization.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/ex.cpp",
		"/D/Projects/CompititiveProgramming/PrefixSum/Trick/gridPrefixSum.cpp",
		"/D/Projects/CompititiveProgramming/SegmentTree/rangeMaxSubarraySum.cpp",
		"/D/Projects/CompititiveProgramming/Math/Euler_totient_phi/phi_signle_1_to_n_both.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/other.cpp",
		"/D/Projects/CompititiveProgramming/Math/InverseMod/inversemod.cpp",
		"/D/Projects/CompititiveProgramming/DP/bitmask/codeforces_321_D.cpp",
		"/D/Projects/CompititiveProgramming/Math/GCD/gcd_set_common_remove.cpp",
		"/D/Projects/CompititiveProgramming/Math/GCD/gcd_mask_common_remove.cpp",
		"/D/Projects/CompititiveProgramming/DP/EasyLCS.cpp",
		"/D/Projects/CompititiveProgramming/DP/CoinChange/coinChange_allow_same_coin.cpp",
		"/D/Projects/CompititiveProgramming/Math/Extend_Euclid/extend_euclid.cpp",
		"/D/Projects/CompititiveProgramming/Math/PascalTriangle/Race.cpp",
		"/D/Projects/CompititiveProgramming/Math/int_sqrt/int_sqrt.cpp",
		"/D/Projects/CompititiveProgramming/CodeforcesAll/Alt.cpp",
		"/D/Projects/CompititiveProgramming/Interactive/AA.cpp",
		"/D/Projects/CompititiveProgramming/Math/Seive/Seive.cpp",
		"/D/Projects/CompititiveProgramming/DP/CoinChange/coinChaingeIII.cpp",
		"/D/Projects/CompititiveProgramming/Game/nimGame.cpp",
		"/D/Projects/CompititiveProgramming/Math/InverseMod/NcRmod.cpp",
		"/D/Projects/CompititiveProgramming/PBDS_tree_order/pbds_less_greater_code.cpp",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation/BFS_grid.cpp",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation/dfs_grid.cpp",
		"/D/Projects/CompititiveProgramming/Optimised_O_NN/AA.cpp",
		"/D/Projects/CompititiveProgramming/BFS_DFS/implementation/inlineDFSfunction.cpp",
		"/D/Projects/CompititiveProgramming/Math/Combinatorics/pasecalTriangle.cpp",
		"/D/CompititiveProgramming/PriorityQueue/customPriotiryQueue.cpp",
		"/D/CompititiveProgramming/Interactive/AA.cpp",
		"/D/CompititiveProgramming/DisjointSet/disjointset.cpp",
		"/D/CompititiveProgramming/DP/0_1_Napsak/0_1_napsack.cpp",
		"/C/wamp/www/hths/actionGetAttendance.php",
		"/C/wamp/www/hths/updatTeacher.php",
		"/D/CompititiveProgramming/SegmentTree/lazySum_Min_both.cpp",
		"/D/CompititiveProgramming/DP/EasyGame.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/outputf.out",
		"/D/CompititiveProgramming/CodeforcesAll/inputf.in",
		"/D/CompititiveProgramming/CodeforcesAll/AA.cpp",
		"/C/wamp/www/hths/hths/database_connection.php",
		"/D/CompititiveProgramming/DP/DigitDp/HowManyZeroes.cpp",
		"/D/CompititiveProgramming/DP/DigitDp/digitdp.cpp",
		"/D/CompititiveProgramming/DP/HowManyZeroes.cpp",
		"/D/CompititiveProgramming/DP/DivisibleGroupSums.cpp",
		"/D/CompititiveProgramming/DP/LoveCalculator.cpp",
		"/D/CompititiveProgramming/DP/delPalindrom.cpp",
		"/D/CompititiveProgramming/Math/InverseMod/inversemod.cpp",
		"/D/CompititiveProgramming/Math/InverseMod/NcRmod.cpp",
		"/D/CompititiveProgramming/SegmentTree/nodeUpdateSegmentTree.cpp",
		"/D/CompititiveProgramming/SegmentTree/RangeSumQueryUpdate.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/map.php",
		"/D/CompititiveProgramming/BFS_DFS/implementation/dfs_graph.cpp",
		"/D/CompititiveProgramming/BFS_DFS/implementation/BFS_graph.cpp",
		"/C/wamp/www/mra.digitalnetrokona.org/app/Http/Controllers/ComplaintController.php",
		"/C/wamp/www/mra.digitalnetrokona.org/resources/views/complain/list.blade.php",
		"/C/wamp/www/mra.digitalnetrokona.org/app/Classes/PropClass.php",
		"/C/wamp/www/mra.digitalnetrokona.org/app/Imports/MfiImport.php",
		"/D/CompititiveProgramming/BFS_DFS/implementation/dfs_grid.cpp",
		"/C/Users/kmpar/AppData/Roaming/Sublime Text 3/Packages/User/cp.sublime-completions",
		"/C/Users/kmpar/AppData/Roaming/Sublime Text 3/Packages/User/cp1.sublime-snippet",
		"/C/Users/kmpar/AppData/Roaming/Sublime Text 3/Packages/User/cp2.sublime-snippet",
		"/D/CompititiveProgramming/BFS_DFS/implementation/BFS_grid.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/zzdfe.cpp",
		"/D/CompititiveProgramming/DP/APerfectMurder.cpp",
		"/D/CompititiveProgramming/DP/MatricsChainMultiplication/PalindromePartitioning.cpp",
		"/D/CompititiveProgramming/DP/Race.cpp",
		"/D/CompititiveProgramming/DP/coinChaingeII.cpp",
		"/D/CompititiveProgramming/DP/Batman.cpp",
		"/D/CompititiveProgramming/DP/AnagramDivision.cpp",
		"/D/CompititiveProgramming/BFS_DFS/UVA/Ex_uva_459_GraphConnectivity_dfs.cpp",
		"/D/CompititiveProgramming/BFS_DFS/LightOj/beehives.cpp",
		"/D/CompititiveProgramming/LCA/LightOJ/outputf.out",
		"/D/CompititiveProgramming/LCA/LightOJ/inputf.in",
		"/D/CompititiveProgramming/LCA/LightOJ/ASecretMission.cpp",
		"/D/CompititiveProgramming/LCA/LCA_SPOJ.cpp",
		"/D/CompititiveProgramming/LCA/SparseTable.cpp",
		"/D/CompititiveProgramming/inputf.in",
		"/D/CompititiveProgramming/PriorityQueue/outputf.out",
		"/D/CompititiveProgramming/PriorityQueue/inputf.in",
		"/D/CompititiveProgramming/CodeforcesAll/hack.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/del.cpp",
		"/D/CompititiveProgramming/Contractive/AA.cpp",
		"/D/CompititiveProgramming/BFS_DFS/LightOj/bladeandSword2BFS.cpp",
		"/D/CompititiveProgramming/SegmentTree/lightOj/outputf.out",
		"/D/CompititiveProgramming/SegmentTree/lightOj/inputf.in",
		"/D/CompititiveProgramming/SegmentTree/lightOj/FastQueries.cpp",
		"/D/CompititiveProgramming/BFS_DFS/LightOj/beehivesDFS.cpp",
		"/D/CompititiveProgramming/DP/outputf.out",
		"/D/CompititiveProgramming/DP/inputf.in",
		"/D/CompititiveProgramming/DP/AA.cpp",
		"/D/CompititiveProgramming/DP/GoodorBad.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/AA.exe",
		"/D/CompititiveProgramming/DP/MatricsChainMultiplication/outputf.out",
		"/D/CompititiveProgramming/DP/MatricsChainMultiplication/inputf.in",
		"/D/CompititiveProgramming/DP/MatricsChainMultiplication/Mixtures.cpp",
		"/D/CompititiveProgramming/DP/MatricsChainMultiplication/PalindromePartitioningBetter.cpp",
		"/D/CompititiveProgramming/DP/PalindromePartitioning.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/sdfjd.cpp",
		"/D/CompititiveProgramming/DP/Raceto1Again.cpp",
		"/D/schoolapp2020/alzaber/SchoolProject/app/src/main/java/com/automateinfosys/alzaberischool/SMS_Activity.java",
		"/C/Users/kmpar/AndroidStudioProjects/StudentAttendanceApp/app/src/main/java/com/khaledmosharraf/stdattendanceapp/Interface/ApiInterface.java",
		"/D/CompititiveProgramming/DP/del.cpp",
		"/D/schoolapp2020/khajaprischool/SchoolProject/app/src/main/java/com/automateinfosys/khajaprischool/SMS_Activity.java",
		"/D/schoolapp2020/khajaprischool/SchoolProject/app/src/main/java/com/automateinfosys/khajaprischool/ManualTakeAttnListActivity.java",
		"/D/schoolapp2020/khajaprischool/SchoolProject/app/src/main/java/com/automateinfosys/khajaprischool/SmsActivity.java",
		"/D/CompititiveProgramming/Math/PascalTriangle/Race.cpp",
		"/D/CompititiveProgramming/DP/DiscoveringGold.cpp",
		"/D/CompititiveProgramming/CodeforcesAll/EEE.cpp",
		"/C/Users/kmpar/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/kmpar/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings"
	],
	"find":
	{
		"height": 39.3333333333
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"m",
			"arr,",
			"v",
			"arr,",
			"tree,",
			"vector<Node>& tree,",
			"vector<int>& arr, vector<Node>& tree,",
			"dfs",
			"n+5",
			"childs",
			"pq",
			"cout",
			"cut",
			"suf",
			"div",
			"hand",
			"int",
			"colored",
			"st",
			"tree,a,",
			"int",
			"1",
			");\n",
			"lim",
			"max_updateSegmentTree",
			"max_querySegmentTree",
			"max_buildSegmentTree",
			"updateSegmentTree",
			"querySegmentTree",
			"buildSegmentTree",
			"minIndex",
			"minValue",
			"};\n",
			"whatis1",
			"]++;\n",
			"preone",
			"predif",
			"temp",
			"onto",
			"ll",
			"ara",
			"int",
			"ll",
			";\n",
			"int",
			"ara",
			"long long",
			"double",
			"n",
			"1 7",
			"1 7\n2 6",
			";\n",
			"ll",
			"v[i]",
			"1",
			"int",
			"push_back",
			"v[i]",
			"s",
			"data",
			"= ",
			"t--&&",
			"sales",
			"user_details",
			"sales",
			"roles",
			"permissions",
			"255",
			"for",
			"prev",
			"for",
			"update_tree",
			"int",
			"1e7",
			">",
			"<",
			"v[ind]!=0",
			"v[ind]!=1e7",
			"yy= 1e7",
			"INT_MAX",
			"ind+1",
			"what",
			"m",
			"has",
			"cursrt",
			"1001",
			"650",
			"MAXX",
			"ind",
			"pre",
			"int",
			"ll",
			"ans",
			"mx",
			"pw1",
			"treeMax",
			"lazyMin",
			"query_tree",
			"update_tree",
			"treeMin",
			"build_tree",
			"normalize",
			"testCases",
			"lcm",
			"DP",
			"push_back",
			"float",
			"ones",
			".first",
			"caseno",
			"div",
			"fac",
			"is",
			"visited",
			"putki",
			"first",
			"second",
			";\n",
			"v[i+1]",
			"v[i]",
			"v[i+1]",
			"v[i]",
			"ll",
			"int",
			"k",
			"ll",
			"insert",
			"set"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"n",
			"",
			"arr",
			"",
			"MX",
			"st",
			"cur",
			"sufL",
			"suf2",
			"g",
			"used",
			"ll",
			"paid",
			"q",
			"",
			"ll",
			"updateMaxSegTree",
			"queryMaxSegTree",
			"buildMaxSegTree",
			"updateMinSegTree",
			"queryMinSegTree",
			"buildMinSegTree",
			"max_buildSegmentTree",
			"indx",
			"value",
			"prezero",
			"preone",
			"int",
			"long long",
			"Int22",
			"int",
			"Int22 ",
			"int",
			"long long",
			"ll",
			"int",
			"vi",
			"1ll",
			"ll",
			"emplace",
			"s",
			"v[i]",
			"s",
			"",
			"100",
			"previous",
			"while",
			"ll",
			"1e18",
			"<",
			">",
			"v[ind]!=-1",
			"v[ind]!=0",
			"yy=-1",
			"1e7",
			"curid",
			"//what",
			"k",
			"have",
			"cntsrt",
			"551",
			"1001",
			"suf",
			"ll",
			"treeMaxInd",
			"lazyMax",
			"query_max_tree",
			"update_max_tree",
			"treeMax",
			"build_max_tree",
			"lcm_n",
			"dp",
			"insert",
			"double",
			"zeros",
			"",
			"true",
			"is[flag]",
			"visited[flag]",
			"first",
			"second",
			"putki",
			"v[i+1].first",
			"v[i].first",
			"v[i+1].first",
			"v[i].first",
			"int",
			"ll",
			"int",
			"push_back",
			"vector",
			"ll",
			"tmp",
			"insert",
			"min",
			"lazyMin",
			"ar",
			"treeMin",
			"lazyMin",
			"treeMin",
			"ll",
			"N",
			"R",
			"L",
			"rcnt",
			"lcnt",
			"int",
			"ll",
			"arr",
			"*it",
			"ll",
			"back",
			"newv",
			"v[i]",
			"aa[2].second",
			"aa[1].second",
			"aa[0].second",
			"aa[1].first",
			"aa[0].first",
			"aa[2].first",
			"j",
			"sum",
			"suma",
			"MX",
			"tmp",
			"q",
			"whatis",
			"vis"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "AA.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6647,
						"regions":
						{
						},
						"selection":
						[
							[
								6452,
								6452
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4032.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/D/Projects/CompititiveProgramming/PriorityQueue/customPriotiryQueue.cpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2502,
						"regions":
						{
						},
						"selection":
						[
							[
								1810,
								1810
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "inputf.in",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31,
						"regions":
						{
						},
						"selection":
						[
							[
								30,
								30
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "outputf.out",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 159,
						"regions":
						{
						},
						"selection":
						[
							[
								58,
								58
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 41.3333333333
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.657880955264,
			1.0
		],
		"rows":
		[
			0.0,
			0.554263565891,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 142.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/CP.sublime-build",
	"project": "myProj.sublime-project",
	"replace":
	{
		"height": 70.6666666667
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 210.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
